AWSTemplateFormatVersion : '2010-09-09'


# DESCRIBE RESOURCES
Resources:

  ## Role: WEB
  ## AMI: CENTOS7
  ## Subnet: Public2
  ## Security groups: OpenSecurityGroup
  EC2InstanceWEB:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-7abd0209'
      IamInstanceProfile: !ImportValue ProfileWEB
      KeyName: 'internal'
      Tags:
        - Key: Name
          Value: WEB
      NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId: !ImportValue 'SubnetPublic2'
          GroupSet:
            - !ImportValue 'OpenSecurityGroup'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -xe
          # install python pip (used for bootstrap)
          yum install epel-release -y
          yum install python-pip -y
          # bootstrap amazon helper script
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          # launch Cloudformation::Init section
          /usr/bin/cfn-init -v \
            --stack ${AWS::StackName} \
            --region ${AWS::Region} \
            --resource EC2InstanceWEB
    Metadata:
      AWS::CloudFormation::Authentication:
        rolebased:
          type: 'S3'
          roleName: !ImportValue 'RoleWEB'
          buckets: [ !ImportValue 'S3BucketDeployment' ]
      AWS::CloudFormation::Init:
        configSets:
          default:
            - install
            - configure
            - start
        install:
          files:
            /tmp/salt-install.sh:
              source: https://bootstrap.saltstack.com
              mode: '755'
              owner: root
              group: root
          commands:
            salt-install:
              # -P allow pip; -M install salt-master; -X don't start daemon
              command: /tmp/salt-install.sh -P -X
        configure:
          sources:
            /etc/salt: !Sub 'https://deployment-${AWS::AccountId}.s3.amazonaws.com/salt/minion/salt.tar.gz'
          files:
            /etc/salt/grains:
              content: !Join
                - '\n'
                -
                  - 'role: web-server'
                  - 'hostname: {{hostname}}'
                  - 'content-bucket: {{contentBucket}}'
                  - 'deployment-bucket: {{deploymentBucket}}'
              context:
                hostname: !Ref EIPweb
                contentBucket: !ImportValue S3BucketContent
                deploymentBucket: !ImportValue S3BucketDeployment
              mode: '640'
              owner: root
              group: root
            /etc/salt/minion:
              content: 'master: {{MasterIP}}'
              context:
                MasterIP: !ImportValue SaltMasterPrivateIP
              mode: '640'
              owner: root
              group: root
        start:
          commands:
            start-salt:
              command: service salt-minion restart

  ## Elastic IP for WEB server
  EIPweb:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !ImportValue VPC

  ## Associate EIP with Instance
  AssociateControlPort:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref EIPweb
      InstanceId: !Ref EC2InstanceWEB

  ## NetworkInterfaces for application instances
  NetworkInterfaceAPP1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet: [ !ImportValue ClosedSecurityGroup ]
      SubnetId: !ImportValue SubnetPrivate1
      Tags:
        - Key: Name
          Value: APP-1

  NetworkInterfaceAPP2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet: [ !ImportValue ClosedSecurityGroup ]
      SubnetId: !ImportValue SubnetPrivate2
      Tags:
        - Key: Name
          Value: APP-2

# Export resources
Outputs:

  ## NetworkInterfaces for application instances
  NetworkInterfaceAPP1:
    Value: !Ref NetworkInterfaceAPP1
    Export: { Name: NetworkInterfaceAPP1 }

  NetworkInterfaceAPP2:
    Value: !Ref NetworkInterfaceAPP2
    Export: { Name: NetworkInterfaceAPP2 }